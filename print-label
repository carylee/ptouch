#!/usr/bin/env python
import cups
import itertools
import cv2
import numpy as np

def partition(l, size):
    for i in range(0, len(l), size):
        yield list(itertools.islice(l, i, i + size))

def init():
    # initialize
    out = b''
    out += bytes([0x1B]) + bytes('@', 'ascii')

    # Return status mode
    out += bytes([0x1B]) + bytes('iS', 'ascii')

    # enable leading autocut
    out += bytes([0x1B]) + bytes('iM@', 'ascii')

    # Specify automatic margins
    # 1st parameter = pixels
    # 2nd parameters = pixels * 256
    out += bytes([0x1B]) + bytes('id', 'ascii') + bytes([0x14, 0x00])

    return out

def to_bin(pixels):
    return int(''.join(map(str, [0 if p == 255 else 1 for p in pixels])),2)

def img_as_numbers(img):
    return [list(map(to_bin, partition(column, 8))) for column in img]

def gen_img_to_bytes(img):
    for col in img_as_numbers(img):
        yield b'G'
        yield bytes([12])
        yield bytes([0])
        yield bytes([0])
        yield bytes([0])
        yield bytes([0])
        yield bytes([0])
        for b in col:
            yield bytes([b])
    yield b'Z'
    yield bytes([0x1A])

def img_to_bytes(img):
    return b''.join(gen_img_to_bytes(img))


def main():
    conn = cups.Connection()
#    printers = conn.getPrinters()

    im = cv2.imread('/Users/Cary/Downloads/blabel.png', cv2.IMREAD_GRAYSCALE)
    (thresh, im_bw) = cv2.threshold(im, 128, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)
    transposed = np.transpose(im_bw)

    prelude = init()
    f = open("printfile", "wb")
    f.write(init() + img_to_bytes(transposed))
    f.close()
    print(conn.printFile('ptouch', 'printfile', "Test Print", {'Copies': '1'}))


if __name__ == "__main__":
    main()
